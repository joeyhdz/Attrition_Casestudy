})
my_plots_list[[1]] = NULL # to get rid of Attrition / Attrition Plot
gridExtra::grid.arrange(grobs= my_plots_list, ncol = 4)
#### Plotting Categorical Var Dist. of Data ####
cat_var <- vizdata %>% select(Attrition, JobSatisfaction, JobLevel, JobInvolvement,
StockOptionLevel, BusinessTravel, JobRole, EducationField,
Gender, MaritalStatus, Department,OverTime,
Education, RelationshipSatisfaction, WorkLifeBalance)
for (j in names(cat_var)) {
plot_var_name <- str_c(c("ggplot",j), collapse ="_")
print(plot_var_name)
temp_plot <- ggplot(cat_var, aes_string(j,fill = 'Attrition')) +
geom_bar(aes(y = ..count../sum(..count..)), position = "dodge", show.legend = F)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition")
assign(plot_var_name, temp_plot)
}
my_plots_cat <- lapply(names(cat_var), function(j) {
ggplot(cat_var, aes_string(j,fill = "Attrition"))+
geom_bar(aes(y = ..count../sum(..count..)), color = "black", position = "dodge", show.legend = F)+
scale_y_continuous(labels = percent_format()) +
ylab("% of Attrition") +
scale_color_fivethirtyeight("Attrition") +
theme_hc()
})
my_plots_cat[[1]] = NULL # to get rid of Attrition / Attrition Plot
gridExtra::grid.arrange(grobs= my_plots_cat, ncol = 4)
# CREATING INTUITIVE TITLE FOR VIZ OF DATA
vizdata$Attrition <- ifelse(vizdata$Attrition == "Yes", "Left", "Stayed")
data$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
vizdata$EducationLevel <- ifelse(data$Education == 1, "No College",
ifelse(data$Education == 2, "Some College",
ifelse(data$Education == 3, "Bachelors",
ifelse(data$Education == 4, "Masters", "Phd"))))
# Breaking Age into Generational Groups
data$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# Breaking Age into Generational Groups - VIZ DATA
vizdata$Generations <- ifelse(data$Age > 26 & data$Age < 42, "Millennials",
ifelse(data$Age <= 26, "Gen Z",
ifelse(data$Age >= 42 & data$Age <57, "Gen X",
ifelse(data$Age >=57 & data$Age <= 67, "Boomers II",
ifelse(data$Age >= 68, "Boomers I", 'Silent')))))
# CAT CODING BELOW:
data$Attrition <- ifelse(data$Attrition == "Yes",1,0)
data$OverTime <- ifelse(data$OverTime == "Yes",1,0)
data$Gender <- ifelse(data$Gender == "Male",1,0)
data$BusinessTravel <- as.numeric(factor(data$BusinessTravel,
levels=c("Non-Travel", "Travel_Rarely", "Travel_Frequently"))) -1
data$HumanResources <- ifelse(data$Department == "Human Resources",1,0)
data$ResearchDevelopment <- ifelse(data$Department == "Research & Development",1,0)
data$Sales <- ifelse(data$Department == "Sales",1,0)
data$Single <- ifelse(data$MaritalStatus == "Single",1,0)
data$Married <- ifelse(data$MaritalStatus == "Married",1,0)
data$Divorced <- ifelse(data$MaritalStatus == "Divorced",1,0)
data$EduHumanResources <- ifelse(data$EducationField == "Human Resources",1,0)
data$EduLifeSciences <- ifelse(data$EducationField == "Life Sciences",1,0)
data$EduMedical <- ifelse(data$EducationField == "Medical",1,0)
data$EduMarketing <- ifelse(data$EducationField == "Marketing",1,0)
data$EduTechnicalDegree <- ifelse(data$EducationField == "Technical Degree",1,0)
data$EduOther <- ifelse(data$EducationField == "Other",1,0)
data$JobSalesExecutive <- ifelse(data$JobRole == "Sales Executive",1,0)
data$JobResearchDirector <- ifelse(data$JobRole == "Research Director",1,0)
data$JobManufacturingDirector <- ifelse(data$JobRole == "Manufacturing Director",1,0)
data$JobResearchScientist <- ifelse(data$JobRole == "Research Scientist",1,0)
data$JobSalesExecutive <- ifelse(data$JobRole == "Sales Executive",1,0)
data$JobSalesRepresentative <- ifelse(data$JobRole == "Sales Representative",1,0)
data$JobManager <- ifelse(data$JobRole == "Manager",1,0)
data$JobHealthcareRepresentative <- ifelse(data$JobRole == "Healthcare Representative",1,0)
data$JobHumanResources <- ifelse(data$JobRole == "Human Resources",1,0)
data$JobLaboratoryTechnician <- ifelse(data$JobRole == "Laboratory Technician",1,0)
data$Bachelors <- ifelse(data$EducationLevel == 'Bachelors', 1, 0)
data$Masters <- ifelse(data$EducationLevel == "Masters", 1, 0)
data$SomeCollege <- ifelse(data$EducationLevel == "Some College", 1, 0)
data$NoCollege <- ifelse(data$EducationLevel == "No College", 1, 0)
data$Phd <- ifelse(data$EducationLevel == "Phd", 1, 0)
data$Millennials <- ifelse(data$Generations == "Millennials", 1, 0)
data$GenZ <- ifelse(data$Generations == "Gen Z", 1, 0)
data$GenX <- ifelse(data$Generations == "Gen X", 1, 0)
data$Boomersii <- ifelse(data$Generations == "Boomers II", 1, 0)
# NUMERICAL ENCODING BELOW:
data$LessThan4k <- ifelse(data$MonthlyIncome < 4000, 1, 0)
data$FreshWorker <- ifelse(data$NumCompaniesWorked <=1.25, 1, 0)
data$LowLevel <- ifelse(data$JobLevel == 1, 1, 0)
data$FreshHire <- ifelse(data$YearsAtCompany <=4, 1, 0)
data$WorkMore30 <- ifelse(data$TotalWorkingYears >=30, 1, 0)
data$LowInvolve <- ifelse(data$JobInvolvement <2, 1, 0)
data$NewRole <- ifelse(data$YearsInCurrentRole <=2, 1, 0)
data$NoBalance <- ifelse(data$WorkLifeBalance <2, 1, 0)
data$SalaryHike <- ifelse(data$PercentSalaryHike  >17, 1, 0)
data$HighSatisfaction <- ifelse(data$JobSatisfaction >= 3, 1, 0)
data$LongCommute <- ifelse(data$DistanceFromHome >= 13, 1, 0)
data$AgeUnder35 <- ifelse(data$Age <=35, 1, 0)
data$DueForPromotion <- ifelse(!data$YearsSinceLastPromotion %in% c(1,5,6,7), 1, 0)
data$HighPerform <- ifelse(data$PerformanceRating >= 3, 1, 0)
data$NoStock <- ifelse(data$StockOptionLevel < 1, 1 , 0)
data$LowTraining <- ifelse(data$TrainingTimesLastYear < 2, 1, 0)
data$HourlyOver40 <- ifelse(data$HourlyRate > 40, 1, 0)
data$MonthlyOver15k <- ifelse(data$MonthlyRate > 15000, 1, 0)
data$LogIncome <- log(data$MonthlyIncome)
# Factor Sub-setting for columns that represent logical baseline reference points from which the model will assume all included
# predictor variables to deviate, and scaling data set for use in modeling
rdata <- subset(data, select = -c(Over18, Department, EducationLevel,
Generations, JobRole, MaritalStatus,
EducationField, EmployeeCount,
StandardHours))
# Scaling data for use in the KNN model
scaled_data <- data.frame(apply(rdata, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# this  tot_correlation will be used to plot the entire correlation matrix
tot_correlation <- subset(rdata, select = -c(HighPerform))
tot_correlation <- cor(tot_correlation)
# data_corr will be used to view a smaller scale of "core" var.
data_corr <- cor(rdata %>% select(Age, Attrition,MonthlyIncome, DistanceFromHome,
Education, NumCompaniesWorked, EnvironmentSatisfaction,
Gender,HourlyRate, JobSatisfaction, PercentSalaryHike,
OverTime, TotalWorkingYears, WorkLifeBalance,
YearsAtCompany:YearsWithCurrManager))
# this df will be used for analysis of Attrition and Salary data correlatives
crdata <- tot_correlation[,c("Attrition", "MonthlyIncome")]
crdata <- data.frame(rbind(names(crdata), crdata))
crdata <- tibble::rownames_to_column(crdata,"Feature")
# for use with core feats.
#crdata <- data_corr[,c("Attrition", "MonthlyIncome")]
#crdata <- data.frame(rbind(names(crdata), crdata))
#crdata <- tibble::rownames_to_column(crdata,"Feature")
# income correlations
IncomeCorrelation <- crdata %>% select(Feature, MonthlyIncome) %>%
filter(!Feature %in% c("MonthlyIncome", "LogIncome")) %>%
arrange(abs(MonthlyIncome))
# attrition correlations
AttritionCorrelation <- crdata %>% select(Feature, Attrition) %>% arrange(abs(Attrition)) %>% filter(Feature != "Attrition")
AttritionCorrelation$Feature <- as.factor(AttritionCorrelation$Feature)
# Corr Plot with Core Feature Selection
ggcorrplot(corr = data_corr, hc.order = TRUE,insig = 'blank',
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Variables and Attrition",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# creating fun to generate the png plots to viz all feats.
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(tot_correlation)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
png(height=1200, width=1800, pointsize=15, file="./project2/CorPlot.png")
corrplot(tot_correlation, method="circle", order="hclust",tl.col="black", type="full", tl.cex = 1, p.mat = p.mat, sig.level = 0.01, insig = "blank")
ggsave("./project2/CorPlot.png", units="in", width=5, height=4, dpi=600)
dev.off()
AttritionCorrelation %>% top_n(10) %>% mutate(Feature = factor(Feature, Feature)) %>%
ggplot(aes(Feature, Attrition, fill = Feature)) + geom_col(show.legend = FALSE) +
coord_flip() + labs(title = "Top 10 Correlative Factors for Attrition") +
ylab("Correlation Between Features and Attrition") +
scale_fill_discrete(guide = guide_legend(reverse = TRUE))+
scale_color_fivethirtyeight() +
theme_hc()
IncomeCorrelation %>% top_n(10) %>% mutate(Feature = factor(Feature, Feature)) %>%
ggplot(aes(Feature, MonthlyIncome, fill = Feature)) +
geom_col(show.legend = FALSE) +
labs(title = "Top 10 Correlative Factors for Monthly Income") +
ylab("Correlation Between Features and Monthly Income") + coord_flip() +
scale_color_fivethirtyeight() +
theme_hc()
#gridExtra::grid.arrange(acp, icp, nrow = 2)
# Plot for job Correlation based on the 10 ranks
job_corr <- cor(rdata %>% select(Attrition, OverTime, NoStock,
LowLevel, JobSalesRepresentative,LowInvolve,
LessThan4k, FreshHire,Single, NewRole,
AgeUnder35))
# Job_Corr Plot with Core Feature Selection
ggcorrplot(corr = job_corr, hc.order = TRUE,insig = 'blank',lab = TRUE,
lab_size = 2,
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Variables and Attrition",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# plot for income corr based on 10 ranks
income_corr <- cor(rdata %>% select(MonthlyIncome, JobLevel,TotalWorkingYears,
JobManager,JobResearchDirector,YearsAtCompany,
Age,GenX,WorkMore30,YearsInCurrentRole,YearsWithCurrManager))
# Corr Plot with Core Feature Selection
ggcorrplot(corr = income_corr, hc.order = TRUE,insig = 'blank',lab = TRUE,
lab_size = 2,
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Variables and Attrition",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
churn_jr <- as.data.frame(vizdata %>% count(JobRole, Attrition))
# creating a DF that shows the COUNT of ATTRITION for each role
churn_jr <- as.data.frame(vizdata %>% count(JobRole, Attrition))
# Creating a DF that has PERCENT of LEAVE/STAY for each Job Role
churn_percent_jr <-
as.data.frame(churn_jr %>% group_by(JobRole) %>%
mutate(Percentage = paste0(round(n/sum(n)*100,2))))
churn_percent_jr$Percentage <- as.numeric(churn_percent_jr$Percentage)
# Tree map of Employees that leave per Job Role
churn_percent_jr %>%
filter(Attrition == "Left") %>%
ggplot(aes(area = Percentage, fill = JobRole, label = paste(JobRole, "\n",Percentage,"%")))+
geom_treemap(show.legend = FALSE, color = 'black') +
geom_treemap_text(color = 'white', place = "center") +
ggtitle('Percentage of Attrition Within Each Job Role') +
theme(plot.title = element_text(hjust = .5))
# Attrition percentage for each age group:
churn_gen <- as.data.frame(vizdata %>% count(Generations, Attrition))
# creating a DF that shows the COUNT of ATTRITION for each role
churn_percent_gen <-
as.data.frame(churn_gen %>% group_by(Generations) %>%
mutate(Percentage = paste0(round(n/sum(n)*100,2))))
churn_percent_gen$Percentage <- as.numeric(churn_percent_gen$Percentage)
# Tree map of Employees that leave per Job Role
churn_percent_gen %>%
filter(Attrition == "Left") %>%
ggplot(aes(area = Percentage, fill = Generations, label = paste(Generations, "\n",Percentage,"%")))+
geom_treemap(show.legend = FALSE, color = 'black') +
geom_treemap_text(color = 'white', place = "center") +
ggtitle('Percentage of Attrition Within Each Age Category') +
theme(plot.title = element_text(hjust = .5))
# bar plot of generation breakdown in total company
vizdata %>% ggplot(aes(Generations, fill = Generations)) +
geom_bar(show.legend = F, color = "black") +
ggtitle("Amount of Employees Within Various Age Categories") +
ylab("Number of Employees") + xlab("Age Categories") +
scale_color_fivethirtyeight() +
theme_hc() + theme(plot.title = element_text(hjust = .5)) +
geom_text(stat = 'count', aes(label = ..count..), vjust = -.25)
# correlation plot for age categories and specific job roles
age_job_cor <- cor(rdata %>% select(JobLaboratoryTechnician, JobResearchScientist,
JobSalesRepresentative, JobSalesExecutive,JobManager,
JobHumanResources, JobHealthcareRepresentative,
JobManufacturingDirector,JobResearchDirector,
GenX,GenZ,Millennials,Boomersii))
# Corr Plot with Core Feature Selection
ggcorrplot(corr = age_job_cor, hc.order = TRUE,insig = 'blank',lab = TRUE,
lab_size = 2, type = 'upper',
colors = c("#6D9EC1", "white", "#E46726")) +
labs(title = "Correlation Between Age and Job Role",
subtitle = "Netural and Positive Correlation") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# age groups within each jobrole
vizdata %>% select(Generations, Department) %>%
group_by(Generations, Department) %>%
summarize(n = n()) %>%
ggplot(aes(x = fct_reorder(Generations, n), y = n, fill = Generations)) +
geom_bar(stat = "identity", color = "black") + facet_wrap(.~Department) +
ggtitle("Allocation of Various Age Groups in Each Department") + ylab("Amount of Employees") +
xlab("Age Groups") + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_color_fivethirtyeight() +
theme_hc() + theme(plot.title = element_text(hjust = .5))
# age groups within each jobrole
vizdata %>% select(Generations, JobRole) %>%
group_by(Generations, JobRole) %>%
summarize(n = n()) %>%
ggplot(aes(x = fct_reorder(Generations, n), y = n, fill = Generations)) +
geom_bar(stat = "identity", color = "black") + facet_wrap(.~JobRole) +
ggtitle("Allocation of Various Age Groups in Each Job Role") + ylab("Amount of Employees") +
xlab("Age Groups") + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_color_fivethirtyeight() +
theme_hc() + theme(plot.title = element_text(hjust = .5))
iterations = 100
masterAcc_nb = matrix(nrow = iterations)
masterSpec_nb = matrix(nrow = iterations)
masterSen_nb = matrix(nrow = iterations)
splitPerc <- .7
nbArray <- c("OverTime","NewRole", "WorkLifeBalance", "JobInvolvement",
"JobSatisfaction", "Gender", "EnvironmentSatisfaction",
"BusinessTravel", "MonthlyIncome", "FreshHire", "AgeUnder35",
"LogIncome", "Divorced", "HourlyOver40", "NoStock","HighPerform")
set.seed(7)
for(j in 1:iterations){
trainIndices = sample(1:dim(data)[1],round(splitPerc * dim(data)[1]))
train = data[trainIndices,]
test = data[-trainIndices,]
model = naiveBayes(train[,nbArray],as.factor(train$Attrition))
CM_NB = confusionMatrix(table(predict(model,test[,nbArray]),as.factor(test$Attrition),
dnn = c("Prediction", "Reference")), positive = '1')
masterAcc_nb[j] = CM_NB$overall[1]
masterSen_nb[j] = CM_NB$byClass[1]
masterSpec_nb[j] = CM_NB$byClass[2]
}
specs_nb <- c(colMeans(masterAcc_nb),colMeans(masterSen_nb),colMeans(masterSpec_nb))
names(specs_nb) <- c("Avg Accuracy ", "Avg Sensitivity ", "Avg Specificity")
specs_nb
model2 = naiveBayes(train[,nbArray], as.factor(train$Attrition))
nbCM = confusionMatrix(table(predict(model2,test[,nbArray]), as.factor(test$Attrition),
dnn = c("Prediction", "Reference")), positive = '1')
# Confusion Matrix code
nb_CM <- function(m){
plot <- ggplot(data = as.data.frame(m$table),
aes(x = Reference, y = Prediction)) +
geom_tile(aes(fill = log(Freq)),
color = "black", show.legend = FALSE) +
scale_fill_gradient(low = "light blue", high = "steelblue") +
geom_text(show.legend = FALSE ,aes(x = Reference, y = Prediction, label = Freq)) +
theme(legend.position = 'none') +
ggtitle("Naive Bayes Attrition Confusion Matrix") +
scale_color_fivethirtyeight() +
theme_hc() + theme(plot.title = element_text(hjust = .5))
return(plot)
}
nb_CM(nbCM)
# Creating a loop with test/train split
# to get avgs and find best k value to run model with.
iterations = 50
set.seed(7)
numks = round(sqrt(dim(scaled_data)[1])*1.2)
masterAcc = matrix(nrow = iterations, ncol = numks)
masterSpec= matrix(nrow = iterations, ncol = numks)
masterSen = matrix(nrow = iterations, ncol = numks)
splitPerc = .7
# dataset to run into loop/etc
knnVar <- c("OverTime","NoStock","LowLevel","JobSalesRepresentative",
"LowInvolve","LessThan4k","FreshHire","Single","NewRole",
"AgeUnder35")
# loop to generate the average perf. of model
for(j in 1:iterations) {
trainIndices = sample(1:dim(scaled_data)[1],round(splitPerc * dim(scaled_data)[1]))
train = scaled_data[trainIndices,]
test = scaled_data[-trainIndices,]
for(i in 1:numks) {
knnClassification = knn(train[,knnVar],test[,knnVar],as.factor(train$Attrition),
prob=TRUE, k = i)
CM = confusionMatrix(table(as.factor(test$Attrition), knnClassification,
dnn =c("Prediction", "Reference")), positive = '1')
masterAcc[j,i] = CM$overall[1]
masterSen[j,i] = CM$byClass[1]
masterSpec[j,i] = CM$byClass[2]
}
}
# pulling the avgs.
MeanAcc <- colMeans(masterAcc)
MeanSen <- colMeans(masterSen)
MeanSpec <- colMeans(masterSpec)
k <- which.max(MeanAcc)
specs <- c(MeanAcc[k], MeanSen[k], MeanSpec[k])
names(specs) <- c("Avg Acc", "Avg Sen", "Avg Spec")
specs
knnClassification = knn(train[,knnVar],test[,knnVar],as.factor(train$Attrition),
prob=TRUE, k = k)
# confusionMatrix(table(test$Attrition, knnClassification,
#                       dnn = c("Prediction","Reference")), positive = '1')
# KNN CONFUSION MATRIX - K PLOT - ROC/AUC PLOT
# plotting kth values
plot(seq(1,numks), MeanAcc, main="K Value Plot", xlab="ith Value of K",
ylab = "Mean Accuracy")
u <- union(knnClassification, test$Attrition)
t <- table(factor(knnClassification, u), factor(test$Attrition, u),
dnn = c("Prediction", "Reference"))
CMP <- confusionMatrix(t)
knn_cm_plot <- as.data.frame(CMP$table)
knn_cm_plot$Prediction <- factor(knn_cm_plot$Prediction,
levels = rev(levels(knn_cm_plot$Reference)))
ggplot(knn_cm_plot, aes(Prediction, Reference, fill=(Freq))) +
geom_tile(show.legend = FALSE, color = 'black') +
geom_text(aes(label=(Freq))) +
scale_fill_gradient(low = "light blue", high = "steelblue") +
labs(x = "Reference", y = "Prediction") +
ggtitle("KNN Attrition Confusion Matrix") +
scale_color_fivethirtyeight() +
theme_hc()+ theme(plot.title = element_text(hjust = .5))
plot(roc(test$Attrition, attributes(knnClassification)$prob),
print.thres = T, print.auc=T, main = "AUC Curve for KNN Performance")
# ORIGINAL MODEL
set.seed(7)
splitPerc = .7
trainIndices = sample(1:dim(data)[1],round(splitPerc * dim(data)[1]))
train = data[trainIndices,]
test = data[-trainIndices,]
income_fit <- lm(MonthlyIncome ~
JobLevel +
TotalWorkingYears +
JobRole, data=train)
ols_plot_diagnostics(income_fit)
income_pred <- predict(income_fit, interval="predict",newdata = test)
RMSE <- sqrt(mean((income_pred[,1] - test$MonthlyIncome)^2))
cat("RMSE = ",RMSE)
# allows us to see vars in model and their stats.
stargazer(income_fit, type = 'text') # adj r2 .92
# prints out vif
car::vif(income_fit)
attdata <- read.csv("C:/Users/Joey/Desktop/ddsproject2/Datasets & Instructions/CaseStudy2CompSet No Attrition.csv", header = TRUE)
attdata$EducationLevel <- ifelse(attdata$Education == 1, "No College",
ifelse(attdata$Education == 2, "Some College",
ifelse(attdata$Education == 3, "Bachelors",
ifelse(attdata$Education == 4, "Masters", "Phd"))))
# Breaking Age into Generational Groups
attdata$Generations <- ifelse(attdata$Age > 26 & attdata$Age < 42, "Millennials",
ifelse(attdata$Age <= 26, "Gen Z",
ifelse(attdata$Age >= 42 & attdata$Age <57, "Gen X",
ifelse(attdata$Age >=57 & attdata$Age <= 67, "Boomers II",
ifelse(attdata$Age >= 68, "Boomers I", 'Silent')))))
# attdata$Attrition <- ifelse(attdata$Attrition == "Yes",1,0)
attdata$OverTime <- ifelse(attdata$OverTime == "Yes",1,0)
attdata$Gender <- ifelse(attdata$Gender == "Male",1,0)
attdata$BusinessTravel <- as.numeric(factor(attdata$BusinessTravel,
levels=c("Non-Travel", "Travel_Rarely", "Travel_Frequently"))) -1
attdata$HumanResources <- ifelse(attdata$Department == "Human Resources",1,0)
attdata$ResearchDevelopment <- ifelse(attdata$Department == "Research & Development",1,0)
attdata$Sales <- ifelse(attdata$Department == "Sales",1,0)
attdata$Single <- ifelse(attdata$MaritalStatus == "Single",1,0)
attdata$Married <- ifelse(attdata$MaritalStatus == "Married",1,0)
attdata$Divorced <- ifelse(attdata$MaritalStatus == "Divorced",1,0)
attdata$EduHumanResources <- ifelse(attdata$EducationField == "Human Resources",1,0)
attdata$EduLifeSciences <- ifelse(attdata$EducationField == "Life Sciences",1,0)
attdata$EduMedical <- ifelse(attdata$EducationField == "Medical",1,0)
attdata$EduMarketing <- ifelse(attdata$EducationField == "Marketing",1,0)
attdata$EduTechnicalDegree <- ifelse(attdata$EducationField == "Technical Degree",1,0)
attdata$EduOther <- ifelse(attdata$EducationField == "Other",1,0)
attdata$JobSalesExecutive <- ifelse(attdata$JobRole == "Sales Executive",1,0)
attdata$JobResearchDirector <- ifelse(attdata$JobRole == "Research Director",1,0)
attdata$JobManufacturingDirector <- ifelse(attdata$JobRole == "Manufacturing Director",1,0)
attdata$JobResearchScientist <- ifelse(attdata$JobRole == "Research Scientist",1,0)
attdata$JobSalesExecutive <- ifelse(attdata$JobRole == "Sales Executive",1,0)
attdata$JobSalesRepresentative <- ifelse(attdata$JobRole == "Sales Representative",1,0)
attdata$JobManager <- ifelse(attdata$JobRole == "Manager",1,0)
attdata$JobHealthcareRepresentative <- ifelse(attdata$JobRole == "Healthcare Representative",1,0)
attdata$JobHumanResources <- ifelse(attdata$JobRole == "Human Resources",1,0)
attdata$JobLaboratoryTechnician <- ifelse(attdata$JobRole == "Laboratory Technician",1,0)
attdata$Bachelors <- ifelse(attdata$EducationLevel == 'Bachelors', 1, 0)
attdata$Masters <- ifelse(attdata$EducationLevel == "Masters", 1, 0)
attdata$SomeCollege <- ifelse(attdata$EducationLevel == "Some College", 1, 0)
attdata$NoCollege <- ifelse(attdata$EducationLevel == "No College", 1, 0)
attdata$Phd <- ifelse(attdata$EducationLevel == "Phd", 1, 0)
attdata$Millennials <- ifelse(attdata$Generations == "Millennials", 1, 0)
attdata$GenZ <- ifelse(attdata$Generations == "Gen Z", 1, 0)
attdata$GenX <- ifelse(attdata$Generations == "Gen X", 1, 0)
attdata$Boomersii <- ifelse(attdata$Generations == "Boomers II", 1, 0)
# NUMERICAL ENCODING BELOW:
attdata$LessThan4k <- ifelse(attdata$MonthlyIncome < 4000, 1, 0)
attdata$FreshWorker <- ifelse(attdata$NumCompaniesWorked <=1.25, 1, 0)
attdata$LowLevel <- ifelse(attdata$JobLevel == 1, 1, 0)
attdata$FreshHire <- ifelse(attdata$YearsAtCompany <=4, 1, 0)
attdata$WorkMore30 <- ifelse(attdata$TotalWorkingYears >=30, 1, 0)
attdata$LowInvolve <- ifelse(attdata$JobInvolvement <2, 1, 0)
attdata$NewRole <- ifelse(attdata$YearsInCurrentRole <=2, 1, 0)
attdata$NoBalance <- ifelse(attdata$WorkLifeBalance <2, 1, 0)
attdata$SalaryHike <- ifelse(attdata$PercentSalaryHike  >17, 1, 0)
attdata$HighSatisfaction <- ifelse(attdata$JobSatisfaction >= 3, 1, 0)
attdata$LongCommute <- ifelse(attdata$DistanceFromHome >= 13, 1, 0)
attdata$AgeUnder35 <- ifelse(attdata$Age <=35, 1, 0)
attdata$DueForPromotion <- ifelse(!attdata$YearsSinceLastPromotion %in% c(1,5,6,7), 1, 0)
attdata$HighPerform <- ifelse(attdata$PerformanceRating >= 3, 1, 0)
attdata$NoStock <- ifelse(attdata$StockOptionLevel < 1, 1 , 0)
attdata$LowTraining <- ifelse(attdata$TrainingTimesLastYear < 2, 1, 0)
attdata$HourlyOver40 <- ifelse(attdata$HourlyRate > 40, 1, 0)
attdata$MonthlyOver15k <- ifelse(attdata$MonthlyRate > 15000, 1, 0)
attdata$LogIncome <- log(attdata$MonthlyIncome)
attdata <- subset(attdata, select = -c(Over18, Department, EducationLevel,
Generations, JobRole, MaritalStatus,
EducationField, EmployeeCount,
StandardHours))
attdata$IDs <- attdata$ID
# Scaling data for use in the KNN model
attdata <- data.frame(apply(attdata, MARGIN = 2,
FUN = function(X) (X - min(X))/diff(range(X))))
D
attdata$ID <- attdata$IDs
attClass = knn(scaled_data[,knnVar], attdata[,knnVar],as.factor(scaled_data$Attrition),
prob = TRUE, k = round(sqrt(dim(scaled_data)[1])))
attPred <- data.frame(attClass)
attPred<- cbind(attdata$ID, attPred)
names(attPred) <- c("ID", "Attrition")
attPred$Attrition <- as.factor(ifelse(attPred$Attrition == 0, "No", "Yes"))
write.csv(attPred, file = "./Case2PredictionsJ_Hernandez Attrition.csv",row.names = FALSE)
miFit <- lm(MonthlyIncome ~ JobLevel +
TotalWorkingYears +
JobRole, data = data)
summary(miFit)
midata <- read_xls("C:/Users/Joey/Desktop/ddsproject2/Datasets & Instructions/CaseStudy2CompSet No Salary.xlsx")
midata <- read_xlsx("C:/Users/Joey/Desktop/ddsproject2/Datasets & Instructions/CaseStudy2CompSet No Salary.xlsx")
miFit <- lm(MonthlyIncome ~ JobLevel +
TotalWorkingYears +
JobRole, data = data)
midata <- read_xlsx("C:/Users/Joey/Desktop/ddsproject2/Datasets & Instructions/CaseStudy2CompSet No Salary.xlsx")
miFit <- lm(MonthlyIncome ~ JobLevel +
TotalWorkingYears +
JobRole, data = data)
miPred <- predict(miFit, interval = "predict", newdata = midata)
midata <- read_xlsx("C:/Users/Joey/Desktop/ddsproject2/Datasets & Instructions/CaseStudy2CompSet No Salary.xlsx")
miFit <- lm(MonthlyIncome ~ JobLevel +
TotalWorkingYears +
JobRole, data = data)
miPred <- predict(miFit, interval = "predict", newdata = midata)
Income_Prediction <- data.frame(cbind(midata$ID, miPred[,1]))
names(Income_Prediction) <- c("ID", "MonthlyIncome")
write.csv(Income_Prediction, file = "./Case2PredictionsJ_Hernandez Salary.csv",row.names = FALSE)
view(midata)
shiny::runApp('C:/Users/Joey/Desktop/attrition_app/App&Dataset')
runApp('C:/Users/Joey/Desktop/New folder/app/housingatt.R')
